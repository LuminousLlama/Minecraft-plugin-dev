/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'fr.il_totore.manadrop' version '0.4.2'
}


project.ext {
    version = "0.0.1"
    projectName = "EnderBowPlugin"
}

apply plugin: "java"
version = ext.version

repositories {
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

         // As of Gradle 5.1, you can limit this to only those
        // dependencies you expect from it
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }

    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }

    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.19-R0.1-SNAPSHOT"
}

application {
    // Define the main class for the application.
    sourceSets.main.java.srcDirs = ['src']
    mainClass = 'me.luminousllama.EnderBowPlugin'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

spigot {
    desc {
        named project.ext.projectName //Default: the project name
        version project.version //Default: the project version
        authors 'LuminousLlama'
        main 'me.luminousllama.EnderBowPlugin'

        description 'A bow that can shoot enderPearls!' 
       

        command{
            named 'enderbow'
            description 'base enderbow command' 
            aliases 'eb'
             
        }
    }
}

processResources.finalizedBy(spigotPlugin)

jar {
    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    archivesBaseName = project.ext.projectName

    destinationDirectory.set(file('C:/Users/Keyush/Desktop/Minecraft Server/plugins'))

    manifest {
        attributes 'Main-Class': 'com.somepackage.MainClass'
                   //'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
    }

    //project.logger.lifecycle(buildDir)
    // How-to add class path:
    //     https://stackoverflow.com/questions/22659463/add-classpath-in-manifest-using-gradle
    //     https://gist.github.com/simon04/6865179
}
